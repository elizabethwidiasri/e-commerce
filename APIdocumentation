BRAND TITLE : poterieÌ€ indulgence

base url = http://localhost:3000

{
    "message": [
        "register failed",
        "Invalid email format",
        "Password have to contain at least 5 character"
    ]
}

{
    "message": [
        "register failed",
        "Please enter your username",
        "Please enter your email",
        "Please enter your password"
    ]
}

USER

1. login

    endpoint : {base url}/users/login
    method : POST

    headers : none
    body : 
      email : type string required
      password : type string required

    success response : 
      status 201
      content example

      {
    "message": "login success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkY2E2ZDZjMDdiYjJmNTA4ZmUwYzdiZCIsImVtYWlsIjoibmF0aEBtYWlsLmNvbSIsImlhdCI6MTU3MzU0NzU5Nn0.345oidFzPMF3CLH4gRjnYE90ECWZ8DMwe8G35_26LLo"
}

2. register

    endpoint : {base url}/users/register
    method : POST

    headers : none
    body : 
      username : type string required
      email : type string required
      password : type string required

    success response : 
      status 200
      content example

      {
    "message": "register success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkY2E2ZDZjMDdiYjJmNTA4ZmUwYzdiZCIsImVtYWlsIjoibmF0aEBtYWlsLmNvbSIsImlhdCI6MTU3MzU0NzM3Mn0.EOEtoDymFL9q26Jlw7rf6Dde2rDVuUqFawouRVIyQGk",
    "user": {
        "_id": "5dca6d6c07bb2f508fe0c7bd",
        "username": "nath",
        "email": "nath@mail.com",
        "password": "$2b$10$eAWHEGjP8LZZ786hQNpPKOQ3S5rLDLELhO/AOFwRnGNPpPlWSxDCa"
    }
}
    

PRODUCT

1.  create

    endpoint : {base url}/products
    method : POST

    headers : 
      authenticated : jwt token
      authorized : admin token

    body : 
      name : type string required
      imageSource : type string required
      price : type integer required
      stock : type integer required 

    success response : 
      status 201
      content example



2.  find all

    endpoint : {base url}/products
    method : GET

    headers : none / query { params : name}

    body : none

    success response : 
      status 200
      content example
 


3.  find one

    endpoint : {base url}/products/:id
    method : GET
    
    headers : none 

    body : none

     success response : 
      status 200
      content example



4.  update :
      endpoint : {base url}/products/:id
      method : PATCH
     
      headers : 
        authenticated : jwt token
        authorized : admin token

      body : 
        name : type string required
        imageSource : type string required
        price : type integer required
        stock : type integer required

       success response : 
        status 200
        content example

5.  delete :

      endpoint : {base url}/products/:id
      method : DELETE
      
      headers : 
        authenticated : jwt token
        authorized : admin token

      body : none

      success response : 
        status 200
        content example

CART

1.  create

    endpoint : {base url}/carts
    method : POST

    headers : 
      authenticated : jwt token
      

    body : 
      productId : type ObjectId, required
      quantity : type integer, required

    success response : 
      status 201
      content example



2.  find all

    endpoint : {base url}/carts
    method : GET

    headers : 
      authenticated : jwt token

    body : none

    success response : 
      status 200
      content example
 


3.  delete :

      endpoint : {base url}/carts/:id
      method : DELETE
      
      headers : 
        authenticated : jwt token
        authorized : cart token

      body : none

      success response : 
        status 200
        content example

